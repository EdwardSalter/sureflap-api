stages:
  - prepare
  - build
  - release

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "api"'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - pyproject.toml

variables:
  CI_REGISTRY: "docker.io"
  CI_REGISTRY_IMAGE: "fabieu/sureflap-api"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_VERSION: "1.7.1"

default:
  image: docker:20.10
  services:
    - docker:20.10-dind
  tags:
    - gitlab-org-docker

prepare-environment:
  stage: prepare
  needs: []
  image: python:3.12.1-alpine
  before_script:
    - pip install poetry==$POETRY_VERSION
  script:
    - echo "Expanding version as environment variable"
    - echo "VERSION=$(poetry version -s)" > .env
    - cat .env
  cache:
    paths:
      - .cache/pip
  artifacts:
    reports:
      dotenv: .env

docker-build-amd64:
  stage: build
  needs:
    - job: prepare-environment
  variables:
    DOCKERHUB_IMAGE_VERSION: "$CI_REGISTRY_IMAGE:$VERSION"
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:amd64"
    DOCKERHUB_IMAGE_VERSION_ARCH: "$CI_REGISTRY_IMAGE:$VERSION-amd64"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile -t "$DOCKERHUB_IMAGE_VERSION" -t "$DOCKERHUB_IMAGE_ARCH" -t "$DOCKERHUB_IMAGE_VERSION_ARCH" .
    - docker push "$CI_REGISTRY_IMAGE" --all-tags

docker-build-arm64:
  stage: build
  needs:
    - job: prepare-environment
  variables:
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:arm64"
    DOCKERHUB_IMAGE_VERSION_ARCH: "$CI_REGISTRY_IMAGE:$VERSION-arm64"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile.arm64v8 -t "$DOCKERHUB_IMAGE_ARCH" -t "$DOCKERHUB_IMAGE_VERSION_ARCH" .
    - - docker push "$CI_REGISTRY_IMAGE" --all-tags

multiarch-manifest:
  stage: build
  needs:
    - job: docker-build-amd64
    - job: docker-build-arm64
  before_script:
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - apk add --no-cache curl
    - curl -Lo manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
    - chmod +x manifest-tool
    - ./manifest-tool push from-spec multi-arch-manifest.yaml

pages:
  stage: release
  needs: []
  image: python:3.12.1-alpine
  before_script:
    - pip install poetry==$POETRY_VERSION
  script:
    - poetry install --only main
    - poetry run python ./docs/export_openapi.py
  artifacts:
    paths:
      - public

create-release:
  stage: release
  needs:
    - job: prepare-environment
    - job: multiarch-manifest
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo 'Creating release for version $VERSION'
  release:
    name: "Release $VERSION"
    tag_name: "$VERSION"
    description: "$CI_COMMIT_MESSAGE"
  allow_failure: true
