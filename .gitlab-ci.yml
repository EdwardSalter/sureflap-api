stages:
  - build
  - release

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "api"'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - sureflap_api/**/*
        - Dockerfile
        - Dockerfile.*
    - if: '$CI_COMMIT_TAG =~ /^\d+.\d+.\d+/'

variables:
  CI_REGISTRY: "docker.io"
  CI_REGISTRY_IMAGE: "fabieu/sureflap-api"

default:
  tags:
    - gitlab-org-docker
  image: docker:20.10
  services:
    - docker:20.10-dind

.latest:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.tag:
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+/

docker-build-amd64:
  stage: build
  rules:
    - !reference [.latest, rules]
  variables:
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:amd64"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile -t "$DOCKERHUB_IMAGE_ARCH" .
    - docker push "$CI_REGISTRY_IMAGE" --all-tags

docker-build-amd64-tag:
  stage: build
  rules:
    - !reference [.tag, rules]
  variables:
    DOCKERHUB_IMAGE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-amd64"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile -t "$DOCKERHUB_IMAGE_ARCH" -t "$DOCKERHUB_IMAGE_TAG" .
    - docker push "$CI_REGISTRY_IMAGE" --all-tags

docker-build-arm32:
  stage: build
  rules:
    - !reference [.latest, rules]
  variables:
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:arm32"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile.arm32v7 -t "$DOCKERHUB_IMAGE_ARCH" .
    - - docker push "$CI_REGISTRY_IMAGE" --all-tags

docker-build-arm32-tag:
  stage: build
  rules:
    - !reference [.tag, rules]
  variables:
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-arm32"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile.arm32v7 -t "$DOCKERHUB_IMAGE_ARCH" .
    - docker push "$CI_REGISTRY_IMAGE" --all-tags

docker-build-arm64:
  stage: build
  rules:
    - !reference [.latest, rules]
  variables:
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:arm64"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile.arm64v8 -t "$DOCKERHUB_IMAGE_ARCH" .
    - - docker push "$CI_REGISTRY_IMAGE" --all-tags

docker-build-arm64-tag:
  stage: build
  rules:
    - !reference [.tag, rules]
  variables:
    DOCKERHUB_IMAGE_ARCH: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-arm64"
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - docker build --pull -f ./Dockerfile.arm64v8 -t "$DOCKERHUB_IMAGE_ARCH" .
    - docker push "$CI_REGISTRY_IMAGE" --all-tags

multiarch-manifest:
  stage: build
  rules:
    - !reference [.latest, rules]
  needs: ["docker-build-amd64", "docker-build-arm64"]
  before_script:
    - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER $CI_REGISTRY --password-stdin
  script:
    - apk add --no-cache curl
    - curl -Lo manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
    - chmod +x manifest-tool
    - ./manifest-tool push from-spec multi-arch-manifest.yaml

create-release:
  stage: release
  rules:
    - !reference [.tag, rules]
  needs: ["docker-build-amd64-tag", "docker-build-arm32-tag", "docker-build-arm64-tag"]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo 'Creating release for version $CI_COMMIT_TAG'
  release:
    name: "Release $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_MESSAGE"
  allow_failure: true
